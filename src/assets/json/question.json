{
    "questions": {
      "name": "invertview_question",
      "questionCount": 39,
      "version":1,
      "type": [
        {
          "name": "OOP",
          "type":4,
          "question_count": 1,
          "questions": [
            {
              "index": 22,
              "question" : "Write basic concepts of OOPS?",
              "answer": "Following are the concepts of OOPS and are as follows:<br/> <b>1. Abstraction.</b><br/>  <b>2. Encapsulation.</b><br/> <b>3. Inheritance.</b><br/>  <b>4. Polymorphism.</b>",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            },
            {
              "index": 31,
              "question" : " What is an inner class?",
              "answer": " Inner class is a class defined inside other class and act like a member of the enclosing class.",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            },
            {
              "index": 32,
              "question" : " Abstract class in Java?",
              "answer": " An abstract class is a class which cannot be instantiated. An abstract class is used by creating an inheriting subclass that can be instantiated. An abstract class does a few things for the inheriting subclass:",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            },
            {
              "index": 33,
              "question" : " Difference between abstract class and interface in Java?",
              "answer": " This is the most important and one of the classic Java Interview question. I don’t know, how many times I have seen this question at all most all levels of Java interviews. One reason, which makes this question interesting is ability to produce example. It’s easy to answers questions on core OOPS concepts like Abstraction, Encapsulation, Polymorphism and Inheritance, but when it comes to subtle points like this, candidate more often fumbled. You can see this post for all syntactical difference between abstract class and interface, but it deserve a post on it’s own.",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            },
            {
              "index": 34,
              "question" : " Aggregation vs Composition",
              "answer": " <b>Aggregation</b> implies a relationship where the child can exist independently of the parent. Example: Class (parent) and Student (child). Delete the Class and the Students still exist.<br/><b>Composition</b> implies a relationship where the child cannot exist independent of the parent. Example: House (parent) and Room (child). Rooms don't exist separate to a House.",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            },
            {
              "index": 35,
              "question" : " What is Encapsulation?",
              "answer": " Encapsulation is an attribute of an object, and it contains all data which is hidden. That hidden data can be restricted to the members of that class.",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            },
            {
              "index": 36,
              "question" : "What is Polymorphism?",
              "answer": " Polymorphism is nothing butassigning behavior or value in a subclass to something that was already declared in the main class. Simply, polymorphism takes more than one form.",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            },
            {
              "index": 37,
              "question" : "What is Inline function?",
              "answer": " Inline function is a technique used by the compilers and instructs to insert complete body of the function wherever that function is used in the program source code.",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            },
            {
              "index": 38,
              "question" : "What is function overloading?",
              "answer": " Function overloading is defined as a normal function, but it has the ability to perform different tasks. It allowscreation of several methods with the same name which differ from each other by type of input and output of the function.<br/>Example<br/>void add(int a, int b);<br/>void add(double a, double b);<br/>void add(float bob a,  float  b);",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            },
            {
              "index": 39,
              "question" : " What is method overriding?",
              "answer": " Method overriding is a feature that allows sub class to provide implementation of a method that is already defined in the main class. This will overrides the implementation in the superclass by providing the same method name, same parameter and same return type.",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            }
          ]
        },
        {
          "name": "Java Scripts",
          "type":4,
          "question_count": 3,
          "questions": [
            {
              "index": 28,
              "question" : "What is closure?",
              "answer": "Closures are created whenever a variable that is defined outside the current scope is accessed from within some inner scope.",
              "favorite":false,
              "has_code": false,
              "code_txt": "<table border='0' cellpadding='10'>      <tr>        <td>          <img src='images/springsource.png'>        </td>        <td>          <h1>Sample 'Hello, World' Application</h1>        </td>      </tr>    </table>    <p>This is the home page for the HelloWorld Web application. </p>    <p>To prove that they work, you can execute either of the following links:    <ul>      <li>To a <a href='hello.jsp'>JSP page</a>.      <li>To a <a href='hello'>servlet</a>.    </ul>\t",
              "has_video": true,
              "video_url": "https://www.youtube.com/embed/1JsJx1x35c0" 
         
            },
            {
              "index": 29,
              "question" : "What is callback?",
              "answer": "A callback is a plain JavaScript function passed to some method as an argument or option. Some callbacks are just events, called to give the user a chance to react when a certain state is triggered.",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
         
            },
            {
              "index": 30,
              "question" : "What is the purpose of 'this' operator in JavaScript?",
              "answer": "JavaScript famous keyword this always refers to the current context. ",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            }
          ]
        },
        {
          "name": "J2EE",
          "type": 1,
          "question_count": 10,
          "questions": [
            
            {
              "index": 1,
              "question" : "What is the name of the class that is super class for every class? ",
              "answer": "  Object",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            },
            {
              "index": 2,
              "question" : "Is it possible to extend the java.lang.String class",
              "answer": "No. java.lang.String is declared as final. Class declared as final cannot be used as a parent class in inheritance.",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 

            },
            {
              "index": 3,
              "question" : "What is the difference between a static and non-static method?",
              "answer": "A static method is associated with the class as a whole rather than a specific instance of a class. Whereas a non – static method can be called only through an object. instance.",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 

            },
            {
              "index": 4,
              "question" : "What is the purpose of garbage collection in java?",
              "answer": "The purpose of garbage collection is to identify and discard objects that are no longer referenced by a program so that they can be reclaimed and reused.",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            },
            {
              "index": 5,
              "question" : "How many public classes are permitted within a single java class file?",
              "answer": "We can define only one public class within a single java class file.",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            },
            {
              "index": 6,
              "question" : "What is the command line utility used to compile java source code into bytecode?",
              "answer": "‘javac’ is the command line utility to compile java source code.",
              "favorite":false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            },
            {
              "index": 7,
              "question" : "Why is the main() method always declared as a static method?",
              "answer": "The main() method is declared as a static method so that it can be invoked without having to create an instance of the corresponding class.",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            },
            {
              "index": 8,
              "question" : "What is an object wrapper?",
              "answer": "An object wrapper is a set of java classes that are used to change basic data type such as int or float into Objects. </br> Eg. java.lang.Integer, java.lang.Float etc.",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            },
            {
              "index": 9,
              "question" : "How are command line arguments passed in java?",
              "answer": "The command line arguments are passed as an array of Strings. If the application requires some input in any particular data type format then the string passed should </br> be type casted to the required data type.",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            },
            {
              "index": 10,
              "question" : "What are transient variables?",
              "answer": "A transient variable is not stored as part of objects persistent state and they cannot be final or static.",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            }
          ]
        },
        {
          "name": "Hibernate",
          "type":2,
          "question_count": 10,
          "questions": [
            {
              "index": 11,
              "question" : "What is ORM?",
              "answer": "ORM stands for Object-Relational Mapping (ORM) is a programming technique for converting data between relational databases and object oriented programming languages such as Java, C# etc.",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            },
            {
              "index": 12,
              "question" : "Name some of the ORM frameworks based on JAVA.",
              "answer": "There are several persistent frameworks and ORM options in Java.</br>Enterprise JavaBeans Entity Beans</br>Java Data Objects</br>Castor</br>TopLink</br>Spring DAO</br>Hibernate",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            },
            {
              "index": 13,
              "question" : "What is Hibernate?",
              "answer": "Hibernate is an Object-Relational Mapping(ORM) solution for JAVA and it raised as an open source persistent framework created by Gavin King in 2001. It is a powerful, high performance Object-Relational Persistence and Query service for any Java Application.</br>Hibernate maps Java classes to database tables and from Java data types to SQL data types and relieve the developer from 95% of common data persistence related programming tasks.",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            },
            {
              "index": 14,
              "question" : "What are the advantages of using Hibernate?",
              "answer": "Following are the advantages of using Hibernate.</br>Hibernate takes care of mapping Java classes to database tables using XML files and without writing any line of code.</br>Provides simple APIs for storing and retrieving Java objects directly to and from the database.</br>If there is change in Database or in any table then the only need to change XML file properties.</br>Abstract away the unfamiliar SQL types and provide us to work around familiar Java Objects.</br>Hibernate does not require an application server to operate.</br>Manipulates Complex associations of objects of your database.</br>Minimize database access with smart fetching strategies.</br>Provides Simple querying of data.",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            },
            {
              "index": 15,
              "question" : "What is a SessionFactory in hibernate?",
              "answer": "Configuration object is used to create a SessionFactory object which inturn configures Hibernate for the application using the supplied configuration file and allows for a Session object to be instantiated. The SessionFactory is a thread safe object and used by all the threads of an application.</br>The SessionFactory is heavyweight object so usually it is created during application start up and kept for later use. You would need one SessionFactory object per database using a separate configuration file. So if you are using multiple databases then you would have to create multiple SessionFactory objects.",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            },
            {
              "index": 16,
              "question" : "What is Session in hibernate?",
              "answer": "A Session is used to get a physical connection with a database. The Session object is lightweight and designed to be instantiated each time an interaction is needed with the database. Persistent objects are saved and retrieved through a Session object.</br>The session objects should not be kept open for a long time because they are not usually thread safe and they should be created and destroyed them as needed.",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            },
            {
              "index": 17,
              "question" : "What is Transaction in hibernate?",
              "answer": "A Transaction represents a unit of work with the database and most of the RDBMS supports transaction functionality. Transactions in Hibernate are handled by an underlying transaction manager and transaction (from JDBC or JTA).</br>This is an optional object and Hibernate applications may choose not to use this interface, instead managing transactions in their own application code." ,
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            },
            {
              "index": 18,
              "question" : "What is Query in hibernate?",
              "answer": "Query objects use SQL or Hibernate Query Language (HQL) string to retrieve data from the database and create objects. A Query instance is used to bind query parameters, limit the number of results returned by the query, and finally to execute the query.",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            },
            {
              "index": 19,
              "question" : "What is Criteria in hibernate?",
              "answer": "Criteria object are used to create and execute object oriented criteria queries to retrieve objects.",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            },
            {
              "index": 20,
              "question" : "What are the three states of a persistent entity at a given point in time?",
              "answer": "Instances may exist in one of the following three states at a given point in time:<br/><b>transient:</b> A new instance of a a persistent class which is not associated with a Session and has no representation in the database and no identifier value is considered transient by Hibernate.<br/><b>persistent:</b> You can make a transient instance persistent by associating it with a Session. A persistent instance has a representation in the database, an identifier value and is associated with a Session.</br><b>detached:</b> Once we close the Hibernate Session, the persistent instance will become a detached instance.",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": ""
            }
          ]
        },
        {
          "name": "DataBase",
          "type":3,
          "question_count": 3,
          "questions": [
            {
              "index": 21,
              "question" : "What is RDBMS ?",
              "answer": "Relational Database Management system (RDBMS) is a database management system (DBMS) that is based on the relational model. Data from relational database can be accessed or reassembled in many different ways without having to reorganize the database tables. Data from relational database can be accessed using an API , Structured Query Language (SQL).",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            },
            {
              "index": 23,
              "question" : " What is SQL ?",
              "answer": "Structured Query Language(SQL) is a language designed specifically for communicating with databases. SQL is an ANSI (American National Standards Institute) standard.",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            },
            {
              "index": 24,
              "question" : " What are the different type of SQL's statements ?",
              "answer": "This is one of the most frequently asked SQL Interview Questions for freshers. SQL statements are broadly classified into three. They are <br/> <b> DDL – Data Definition Language: </b> DDL is used to define the structure that holds the data. For example, Create, Alter, Drop and Truncate table. <br/> <b> 2. DML – Data Manipulation Language: </b> DML is used for manipulation of the data itself. Typical operations are Insert, Delete, Update and retrieving the data from the table. The Select statement is considered as a limited version of the DML, since it can't change the data in the database. But it can perform operations on data retrieved from the DBMS, before the results are returned to the calling function. <br/> <b> DCL – Data Control Language: </b>  DCL is used to control the visibility of data like granting database access and set privileges to create tables, etc. Example - Grant, Revoke access permission to the user to access data in the database. ",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            }
          ]
        },
        {
          "name": "Design Design Patterns",
          "type":4,
          "question_count": 4,
          "questions": [
            {
              "index": 25,
              "question" : "What are Design Patterns?",
              "answer": "Design patterns represent the best practices used by experienced object-oriented software developers. Design patterns are solutions to general problems that software developers faced during software development. These solutions were obtained by trial and error by numerous software developers over quite a substantial period of time.",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            },
            {
              "index": 26,
              "question" : " Name types of Design Patterns?",
              "answer": "Design patterns can be classified in three categories: Creational, Structural and Behavioral patterns.<br/><br/><b>Creational Patterns</b> - These design patterns provide a way to create objects while hiding the creation logic, rather than instantiating objects directly using new opreator. This gives program more flexibility in deciding which objects need to be created for a given use case.<br/><b>Structural Patterns</b> - These design patterns concern class and object composition. Concept of inheritance is used to compose interfaces and define ways to compose objects to obtain new functionalities.<br/><b>Behavioral Patterns</b> - These design patterns are specifically concerned with communication between objects.",
              "favorite":false,
              "has_video": false,
              "has_code": false,
              "code_txt": "",
              "video_url": "" 
            },
            {
              "index": 27,
              "question" : " Define Java Singleton? ",
              "answer": "To implement Singleton pattern, we have different approaches but all of them have following common concepts.<br/><br/>Private constructor to restrict instantiation of the class from other classes.<br/>Private static variable of the same class that is the only instance of the class.<br/>Public static method that returns the instance of the class, this is the global access point for outer world to get the instance of the singleton class.",
              "favorite":false,
              "has_video": true,
              "has_code": false,
              "code_txt": "",
              "video_url": "https://www.youtube.com/embed/bgU7FeiWKzc" 
            },
            {
              "index": 28,
              "question" : "What is difference between Factory and Abstract Factory in Java? ",
              "answer": "The main difference is that Abstract Factory creates factory while Factory pattern creates objects. So both abstract the creation logic but one abstract is for factory and other for items.",
              "favorite":false,
              "has_video": true,
              "has_code": false,
              "code_txt": "",
              "video_url": "https://www.youtube.com/embed/ub0DXaeV6hA" 
            }
          ]
        }
      ]
    }
  }